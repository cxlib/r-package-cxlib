% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cxlib_config.R
\docType{class}
\name{cxlib_config-class}
\alias{cxlib_config-class}
\alias{cxlib_config}
\title{Utility class to represent cxlib configurations}
\description{
A utility class to represent cxlib configuration defined in property files and
environmental variables.

Property files are named \verb{<context>.properties} where the configuration option
is referred to by \verb{context/<property>}.

Property file syntax and conventions are specified in the help reference for
function \link[cxlib]{cxlib_propertiesread}.

Class initialization first searches for \code{cxlib.properties} in predefined locations
with the first occurrence used. The search sequence is defined as
\enumerate{
\item current working directory
\item \code{config} sub-directory in the app home directory (\code{APP_HOME}
environmental variable, if defined)
\item app home directory (\code{APP_HOME} environmental variable, if defined)
\item cxlib package install directory in the library tree (\code{libPaths()})
}

You can specify a vector of paths as an argument when initiating the
\code{cxlib_config()} class. If the path specified ends in \code{.properties}, it is
assumed a properties file. Otherwise,  the entry is assumed a directory
containing property files with the extension \code{.properties}. The vector \code{x}
is processed in specified order and files within a directory in natural sort
order.

The \code{option()} method returns the value of an option if it exists or the value
of \code{unset} if the option does not exist. An option is referred to by the string
\verb{<context>/<property>}. If context is omitted, it is assumed \code{cxlib}.

If the option is not defined as part of a property file, the \code{option()} method
searches for the environment variable \verb{<context>_<property>}, case insensitive.
Any periods in property the name part is converted to underscores.

An option value that contains the prefix \verb{[env] <name>} or starts with the
character \verb{$<name>} is interpreted as a reference to an environmental
variable with specified name. If the specified environmental variable is not
defined, the value of \code{unset} is returned. The environmental variable name is
case sensitive with leading and trailing spaces removed.

The \code{option()} method switch \code{as.type = TRUE} returns a \emph{typed} value.
If the option name contains \code{PATH}, case insensitive, a vector of paths
separated by \code{path.sep} defined in \link[base]{.Platform} is returned.

The logical option value \code{TRUE} is returned if the option value is equal to
one of \code{ENABLE}, \code{ENABLED}, \code{GRANT} and \code{PERMIT}, case insensitive.

The logical option value \code{FALSE} is returned if the option value is equal to
one of \code{DISABLE}, \code{DISABLED}, \code{REVOKE} and \code{DENY}, case insensitive.

If none of the above type conversions are satisfied or if \code{as.type} is equal
to \code{FALSE}, the \emph{raw} property value is returned.

(\emph{Experimental}) An option value that contains the prefix \verb{[vault] <name>}
is interpreted as a reference to a vault secret with specified name. If a
vault service is not configured or available or the vault is not defined the
specified secret, the value of \code{unset} is returned. The secret name is case
sensitive with leading and trailing spaces removed. See \link[cxlib]{cxlib_vault}
for configuration options.
}
\section{Fields}{

\describe{
\item{\code{.attr}}{Internal configuration data store}
}}

\section{Methods}{

\describe{
\item{\code{initialize(x)}}{Initialize}

\item{\code{option(x, unset = NA, as.type = TRUE)}}{Get property value}
}}

