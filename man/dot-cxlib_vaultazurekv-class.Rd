% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/internal-cxlib_vaultazurekv.R
\docType{class}
\name{.cxlib_vaultazurekv-class}
\alias{.cxlib_vaultazurekv-class}
\alias{.cxlib_vaultazurekv}
\title{(Experimental) Internal reference class representing a connection to Azure Key Vault}
\description{
An internal utility class representing a connection to an Azure Key Vault

The Azure Key Vault is not hierarchical but can use a path notation with
forward slash as separator to represent a crude hierarchy. The forward
slashes are translated to underscores mimicking a hierarchical reference
structure.

The levels of the hierarchy and the secret name consists of the characters
a-z, 0-9 and punctuation dash (-), underscore '_' and period '.'.

The Azure Key Vault relies on multiple cxlib properties.

The Azure Key Vault service is enabled by setting the cxlib property \code{VAULT} to
the value \code{AZUREKV}.

The cxlib property \code{AZUREKV.URL} defines the Azure Key Vault connection URL.

The following properties are used to connect and retrieve a temporary access
token. All are required.

\code{AZUREKV.OAUTH.URL} is the URL for Microsoft OAuth service.

\code{AZUREKV.OAUTH.CLIENTID} is the OAuth client ID.

\code{AZUREKV.OAUTH.CLIENTSECRET} is the client secret.

\code{AZUREKV.OAUTH.SCOPE} is the authentication scope.

\strong{\emph{It is on the role of the developer and implementer to ensure
that the secrets stored in the vault and their use is appropriately protected.}}

The \code{secret()} method retrieves a specified secret from the vault. If the
secret is not defined or a connection failed, the value of \code{unset} is returned.
A secret is stored and returned as a single text value.
}
\section{Methods}{

\describe{
\item{\code{initialize()}}{Initialize vault}

\item{\code{secret(x, unset = NA)}}{Get secret}
}}

\keyword{internal}
