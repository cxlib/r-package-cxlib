% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cxlib_batchjob.R
\docType{class}
\name{cxlib_batchjob-class}
\alias{cxlib_batchjob-class}
\alias{cxlib_batchjob}
\title{A reference class representing a cxlib batch job}
\description{
A utility class representing a cxlib batch job. This utility is not accessed
directly but the mechanisms and methods for \link[cxlib]{cxlib_batch} and services
implementing R jobs and associated actions.

A job can be identified by an existing Job ID or a vector of program paths or
a job definition to execute.

A batch job consists of a set of actions, which in the current implementation
is limited to an ordered sequence of one or more programs. The programs can
be specified as a character vector or as the named list entry \code{programs} as
part of the job definition.

\emph{Note: All paths, including program annotations, are relative to the
current working directory.}

The job actions can be specified as part of object initialization, using the
\code{add(x)} method or both. Note that an added action cannot be removed and
actions added to a job with existing actions will append the actions to the
existing list.

If \code{cxlib_batchjob} is initialized with a single character string in the
format of a valid Job ID, it is assumed the string represents an existing Job.

A vector of program paths can be specified as input during initialization or
to the \code{add()}method. The program paths in the specified order becomes the
new Job definition.

A job definition can be provided as input in the form of a list of named entries,
with only \code{programs} required.

\itemize{
\item \code{programs} a vector of program paths in the order of execution
\item \code{id} a predefined Job ID in UUID format (see \link[uuid]{UUIDgenerate})
\item \code{archive} with inputs and programs provided as the contents of a job archive
\item \code{options} sets one or more options (see below) for the submitted Job
}

A job \code{archive} is a Zip file (see \link[zip]{zip}) that contains all programs
and required input files. The root of the Zip-file internal directory structure
represents the working directory for the executing actions.

The following options are supported as part of a Job definition or as a cxlib
property (see process options below). Options can only be defined during
\code{cxlib_batchjob()} initialization.

\itemize{
\item \code{LOGS} defines the standard directory path for logs
\item \code{LOG.FILEEXT} defines the standard log file extension
}

If the option is defined as both part of the Job and a property, the job
definition takes precedence.

Processing options can be defined as part of a Job definition or through cxlib
properties (see \link[cxlib]{cxlib_config}).

The following options sets the locations of for processing.
\itemize{
\item \code{PATH}option specifies the root directory for batch job processes. If
not defined, the sub-directory \code{.cxlib} in the R session temporary directory
(\link[base]{tempdir}) is used.
\item \code{WORKPATH} option specifies the work area directory for batch jobs.
If not defined, the directory \code{PATH} is used. The \code{WORKPATH} is the
parent directory to job working directories.
}

The method \code{submit( wait = TRUE )} submits the registered actions for processing.
Actions are executed in a standalone R session. If \code{WAIT} is equal to \code{FALSE},
the R session is executed in the background.

The \code{save()} methods saves the action results to the current working directory
on the R session local file system.

The \code{archive()} method creates a standard Zip-file archive \verb{job-<id>-results.zip}
containing the results of the job actions, with root of the Zip-file
representing the job working directory. The method invisibly returns the
path to the Zip-file archive.

The \code{delete()} method deletes the temporary directories associated with the job.

The experimental method \code{actions()} returns a list of actions and their status.

The experimental method \code{status()} returns a list of actions with abbreviated
information including their status.

The experimental method \code{details()} returns a list of job details including
job actions and status.
}
\section{Fields}{

\describe{
\item{\code{.attr}}{Internal storage}
}}

\section{Methods}{

\describe{
\item{\code{actions()}}{List actions}

\item{\code{add(x)}}{Add job actions}

\item{\code{archive()}}{Create an archive of job results}

\item{\code{delete()}}{Delete job areas}

\item{\code{details(wait = TRUE)}}{Job details}

\item{\code{initialize(x = NULL)}}{Create new batch job}

\item{\code{save()}}{Save job results}

\item{\code{status()}}{Job status}

\item{\code{submit(wait = TRUE)}}{Submit job}
}}

